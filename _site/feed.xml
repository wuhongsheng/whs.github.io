<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WHS</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 11 May 2017 12:53:34 +0800</pubDate>
    <lastBuildDate>Thu, 11 May 2017 12:53:34 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>智能硬件学习</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#相关网站&quot; id=&quot;markdown-toc-相关网站&quot;&gt;相关网站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

智能硬件学习

&lt;h3 id=&quot;相关网站&quot;&gt;相关网站&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackster.io/&quot;&gt;Hackster&lt;/a&gt;
致力于学习硬件的社区&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 10 May 2017 16:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/05/10/%E6%99%BA%E8%83%BD%E7%A1%AC%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/10/%E6%99%BA%E8%83%BD%E7%A1%AC%E4%BB%B6/</guid>
        
        <category>智能硬件</category>
        
        
        <category>智能硬件</category>
        
      </item>
    
      <item>
        <title>MacBook使用技巧</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#启用键盘打字机音效&quot; id=&quot;markdown-toc-启用键盘打字机音效&quot;&gt;启用键盘打字机音效&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

MacBook使用技巧

&lt;h3 id=&quot;启用键盘打字机音效&quot;&gt;启用键盘打字机音效&lt;/h3&gt;

系统偏好设置 -&amp;gt; 辅助功能 -&amp;gt; 键盘 -&amp;gt; 启用慢速键 -&amp;gt; 选项（勾选使用按键音并将延时时间调到最短）

</description>
        <pubDate>Wed, 10 May 2017 16:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/05/10/MacBook%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/10/MacBook%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
        
        <category>MacBook</category>
        
        
        <category>MacBook</category>
        
      </item>
    
      <item>
        <title>普通程序员如何向人工智能靠拢</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#参考资料&quot; id=&quot;markdown-toc-参考资料&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

机器学习基础

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;a href=&quot;http://www.infoq.com/cn/news/2017/05/ordinary-programmer-approach-art?utm_source=news_about_architecture-design&amp;amp;utm_medium=link&amp;amp;utm_campaign=architecture-design&quot;&gt;普通程序员如何向人工智能靠拢&lt;/a&gt;

</description>
        <pubDate>Tue, 09 May 2017 16:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/05/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</guid>
        
        <category>机器学习</category>
        
        <category>AI</category>
        
        
        <category>机器学习</category>
        
      </item>
    
      <item>
        <title>GreenDAO使用教程</title>
        <description>
&lt;a href=&quot;http://greenrobot.org/greendao/&quot;&gt;GreenDAO&lt;/a&gt; 使用教程

&lt;ol&gt;
  &lt;li&gt;集成环境&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// In your root build.gradle file:
buildscript {
    repositories {
        jcenter()
        mavenCentral() // add repository
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2' // add plugin
    }
}
 
// In your app projects build.gradle file:
apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao' // apply plugin
 
dependencies {
    compile 'org.greenrobot:greendao:3.2.2' // add library
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;在Gradle中配置数据库版本信息等&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;greendao {
        //当前数据库版本
        schemaVersion 1
        //由GreenDao自动生成代码所在的包名，默认的是在项目包下面新建一个gen。
        daoPackage 'com.titan.data.greendao'
        //设置自动生成代码的目录
        targetGenDir 'src/main/java'
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

3.在项目中定义实体类

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Entity
public class TrackPoint  {
    @Id(autoincrement = true)
    private Long id;
    /**上传时间*/
    @NotNull
    @Property(nameInDb = &quot;TIME&quot;)
    private String time;
	/**经度*/
    @Property(nameInDb = &quot;LON&quot;)
    private double lon;
	/**纬度*/
    @Property(nameInDb = &quot;LAT&quot;)
    private double lat;
    /**用户id*/
    @Property(nameInDb = &quot;USERID&quot;)
    private String userid;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

注解：

@Entity   标识实体类，greenDAO会映射成sqlite的一个表，表名为实体类名的大写形式

@Id 标识主键，该字段的类型为long或Long类型，autoincrement设置是否自动增长

@Property       标识该属性在表中对应的列名称, nameInDb设置名称

@Transient      标识该属性将不会映射到表中，也就是没有这列

@NotNull         设置表中当前列的值不可为空

@Convert         指定自定义类型(@linkPropertyConverter)

@Generated   greenDAO运行所产生的构造函数或者方法，被此标注的代码可以变更或者下次运行时清除

@Index    使用@Index作为一个属性来创建一个索引；定义多列索引(@link Entity#indexes())

@JoinEntity     定义表连接关系

@JoinProperty         定义名称和引用名称属性关系

@Keep     注解的代码段在GreenDao下次运行时保持不变

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      1.注解实体类：默认禁止修改此类
      2.注解其他代码段，默认禁止修改注解的代码段
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

@OrderBy        指定排序

@ToMany         定义与多个实体对象的关系

@ToOne  定义与另一个实体（一个实体对象）的关系

@Unique 向数据库列添加了一个唯一的约束

4.生成相关代码

定义好了之后按ctrl+F9（或者工具栏build下面的Make Project）对项目进行重新构建，再
daoPackage的目录下就会自动生成代码

5.新建一个类，实例化greenDAO所需要的几个关键对象，DaoMaster，DaoSession，代码如下：

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class GreenDaoManager {
    private DaoMaster mDaoMaster;
    private DaoSession mDaoSession;
    private static volatile GreenDaoManager mInstance = null;
    private GreenDaoManager(){
        if (mInstance == null) {
            DaoMaster.DevOpenHelper devOpenHelper = new
                    DaoMaster.DevOpenHelper(App.getContext(), &quot;user.db&quot;);
            mDaoMaster = new DaoMaster(devOpenHelper.getWritableDatabase());
            mDaoSession = mDaoMaster.newSession();
        }
    }
    public static GreenDaoManager getInstance() {
        if (mInstance == null) {
            synchronized (GreenDaoManager.class) {                if (mInstance == null) {
                    mInstance = new GreenDaoManager();
                }
            }
        }
        return mInstance;
    }
    public DaoMaster getMaster() {
        return mDaoMaster;
    }
    public DaoSession getSession() {
        return mDaoSession;
    }
    public DaoSession getNewSession() {
        mDaoSession = mDaoMaster.newSession();
        return mDaoSession;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

6.然后在Application中初始化：

&lt;code class=&quot;highlighter-rouge&quot;&gt;GreenDaoManager.getInstance();&lt;/code&gt;

7.数据库增、删、查、改

首先获得UserDao的对象
&lt;code class=&quot;highlighter-rouge&quot;&gt;
UserDao userDao=GreenDaoManager.getInstance().getNewSession().getUserDao();
&lt;/code&gt;
增：
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User user = new User(null, name, age, studentId);
userDao.insert(user);


insert(T entity)       当指定主键在表中存在时会发生异常
insertOrReplace(T entity)      当指定主键在表中存在时会覆盖数据
insertInTx(Iterable&amp;lt;T&amp;gt; entities)      批量插入数据
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

删：
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User user = new User(null, name, age, studentId);    
userDao.delete(user)
 
delete(T entity)       删除数据
deleteByKey(K key)     指定主键删除数据
deleteInTx(Iterable&amp;lt;T&amp;gt; entities)      批量删除数据
deleteByKeyInTx(Iterable&amp;lt;K&amp;gt; keys)      批量按数据删除数据        
deleteAll()    删除所有数据
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
改：
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;User user = new User(id, name, age, studentId);
userDao.update(user);
 
update(T entity)       修改数据，主键需相同
updateInTx(Iterable&amp;lt;T&amp;gt; entities)      批量更新数据
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

查：
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;userDao.load(id)
 
load(K key)    根据id查找数据
loadByRowId(long rowId)        根据行号查找数据
loadAll()      查找全部数据

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

8.一对一、一对多关系

greenDAO目前只支持一对一和一对多关系，并不支持多对多关系

一对一：
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private Long studentId;
@ToOne(joinProperty = &quot;studentId&quot;)
private Studentstudent;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Generated(hash = 313494093)
public Student getStudent() {
    Long __key = this.studentId;
    if (student__resolvedKey == null || !student__resolvedKey.equals(__key)) {
        final DaoSession daoSession = this.daoSession;
        if (daoSession == null) {
            throw new DaoException(&quot;Entity is detached from DAO context&quot;);
        }
        StudentDao targetDao = daoSession.getStudentDao();
        Student studentNew = targetDao.load(__key);
        synchronized (this) {
            student = studentNew;
            student__resolvedKey = __key;
        }
    }
    return student;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
使用@ToOne标记，joinProperty指定一个字段，如果没有定义，会自动生成一个字段，get方法时自动生成的，使用@Generated标记，代表自动生成的，无需动代码。

一对多（有三种映射形式）：
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@ToMany(referencedJoinProperty = &quot;teacherId&quot;)
private List&amp;lt;Teacher&amp;gt; teacherList;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

referencedJoinProperty：指定目标实体中与源实体相对应的外键。
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@ToMany(joinProperties = {
        @JoinProperty(name=&quot;studentTag&quot;,referencedName = &quot;teacherTag&quot;)
})
private List&amp;lt;Teacher&amp;gt; teacherList;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
JoinProperty: 对于复杂一点的关系可以定义一组@JoinProperty注解。每个@JoinProperty注解都需要有源实体中的源属性和对应实体中的引用属性。
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@ToMany
@JoinEntity(
        entity = Teacher.class,
        sourceProperty = &quot;teacherId&quot;,
        targetProperty = &quot;id&quot;
)
private List&amp;lt;Teacher&amp;gt; teacherList;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
@JoinEntity：在做NM多对多映射的时候使用

9.数据库升级

数据库升级最麻烦的就是数据保存的问题，下面是数据库升级时执行的代码。
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/** WARNING: Drops all table on Upgrade! Use only during development. */
public static class DevOpenHelper extends OpenHelper {
    public DevOpenHelper(Context context, String name) {
        super(context, name);
    }

    public DevOpenHelper(Context context, String name, CursorFactory factory) {
        super(context, name, factory);
    }

    @Override
    public void onUpgrade(Database db, int oldVersion, int newVersion) {
        Log.i(&quot;greenDAO&quot;, &quot;Upgrading schema from version &quot; + oldVersion + &quot; to &quot; + newVersion + &quot; by dropping all tables&quot;);
        dropAllTables(db, true);
        onCreate(db);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
第一句注释的话已经告诉我们数据库升级时会删除所有的表，重新创建。所以我们可以自定义一个类继承OpenHelper，在升级时先生成临时表，删除旧表创建新表后，再把临时表的数据导入进去。有牛人已经做出这个项目来了，我就厚颜无耻选择直接用了。

在project的gradle添加
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;allprojects {
    repositories {
        jcenter()
        maven { url &quot;https://jitpack.io&quot; }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

在app的gradle添加：
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile 'com.github.yuweiguocn:GreenDaoUpgradeHelper:v1.3.0'
注意：要是使用的还是greenDAO3.0以前的版本，添加的是

compile 'com.github.yuweiguocn:GreenDaoUpgradeHelper:v1.0.1'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

新建一个类
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MySQLiteOpenHelperextendsDaoMaster.OpenHelper{
    public MySQLiteOpenHelper(Contextcontext,Stringname){
        super(context,name);
    }
    public MySQLiteOpenHelper(Contextcontext,String name,SQLiteDatabase.CursorFactoryfactory) {
        super(context,name,factory);
    }
    @Override
    public void onUpgrade(SQLiteDatabasedb,int oldVersion,intnewVersion) {
        Log.d(“SQLite”,“数据库从”+oldVersion+“升级到”+newVersion);
        MigrationHelper.migrate(db,UserDao.class,StudentDao.class);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

在GreenDaoManager修改代码：
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class GreenDaoManager {
    private DaoMaster mDaoMaster;
    private DaoSession mDaoSession;
    private static volatile GreenDaoManager mInstance = null; 
    private GreenDaoManager(){
        if (mInstance == null) {
            //重写MySQLiteOpenHelper数据库升级，数据不丢失
            //MyApplication.getContext()上下文表示了数据库存储路径为手机内存
            //DEBUG表示是否打印debug
            MigrationHelper.DEBUG = true;
            MySQLiteOpenHelper helper = new
                    MySQLiteOpenHelper(App.getContext(),&quot;user.db&quot;,null);
            mDaoMaster = new DaoMaster(helper.getWritableDatabase());
            mDaoSession = mDaoMaster.newSession();
        }
    }

    public static GreenDaoManager getInstance() {
        if (mInstance == null) {
            synchronized (GreenDaoManager.class) {                if (mInstance == null) {
                    mInstance = new GreenDaoManager();
                }
            }
        }
        return mInstance;
    }
    public DaoMaster getMaster() {
        return mDaoMaster;
    }
    public DaoSession getSession() {
        return mDaoSession;
    }
    public DaoSession getNewSession() {
        mDaoSession = mDaoMaster.newSession();
        return mDaoSession;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
注意：migrate(SQLiteDatabase db, Class… daoClasses); 里面的参数是全部的实体类，就是要生成的表。
要生成的表。

</description>
        <pubDate>Mon, 08 May 2017 16:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/05/08/GreenDAO%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/08/GreenDAO%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
        
        <category>Android</category>
        
        <category>GreenDAO</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android开发常用技巧</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#uiueux&quot; id=&quot;markdown-toc-uiueux&quot;&gt;UI/UE/UX&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#rippledrawable---波纹效果&quot; id=&quot;markdown-toc-rippledrawable---波纹效果&quot;&gt;RippleDrawable - 波纹效果&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

Android 开发技巧

&lt;h3 id=&quot;uiueux&quot;&gt;UI/UE/UX&lt;/h3&gt;

&lt;h4 id=&quot;rippledrawable---波纹效果&quot;&gt;RippleDrawable - 波纹效果&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;使用Android 提供的属性&lt;/li&gt;
&lt;/ul&gt;

&lt;code class=&quot;highlighter-rouge&quot;&gt;android:foreground=&quot;?android:attr/selectableItemBackground&quot;&lt;/code&gt;

扩散到View边界

&lt;code class=&quot;highlighter-rouge&quot;&gt;android:foreground=&quot;?android:attr/selectableItemBackgroundBorderless&lt;/code&gt;

设置后，会从孩子往父亲找一个依附的色。如果View往上找的时候，亲生父亲没背景色，会继续向上查找直到最顶端。找到了最顶端的爷爷，这个时候才绘制。然而，如果父亲的兄弟又绘制了颜色，且盖住了最顶端的绘制，会导致看不到效果。如果有一定的透明度，结果就显而易见了。
特别注意：
当把硬件加速给关闭时，这个效果是没有的。
这是API 21的新属性，老版本无法使用.

&lt;ul&gt;
  &lt;li&gt;自定义&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- A green ripple drawn atop a black rectangle. --&amp;gt;
&amp;lt;ripple android:color=&quot;#ff00ff00&quot;&amp;gt;
    &amp;lt;item android:drawable=&quot;@android:color/black&quot; /&amp;gt;
&amp;lt;/ripple&amp;gt;
 
&amp;lt;!-- A blue ripple drawn atop a drawable resource. --&amp;gt;
&amp;lt;ripple android:color=&quot;#ff0000ff&quot;&amp;gt;
    &amp;lt;item android:drawable=&quot;@drawable/my_drawable&quot; /&amp;gt;
&amp;lt;/ripple&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

android:color中是点击响应色，也是波纹扩散色。
item中是正常状态下的显示。

一般使用时会和原有的selector配合，原有的selector负责5.0以下显示效果，
新的selector内部含有ripple标签放在drawable-v21中，保证点击效果。

</description>
        <pubDate>Mon, 08 May 2017 16:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/05/08/Android%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/08/Android%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
        
        <category>Android</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>常用Git命令及问题</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#git简介&quot; id=&quot;markdown-toc-git简介&quot;&gt;Git简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#常见问题及解决方法&quot; id=&quot;markdown-toc-常见问题及解决方法&quot;&gt;常见问题及解决方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。

&lt;h3 id=&quot;git简介&quot;&gt;Git简介&lt;/h3&gt;

Git是什么？

Git是目前世界上最先进的分布式版本控制系统（没有之一）。

Git的诞生

阅读: 725576
很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。

Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？

事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！

你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。

不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。

安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。

Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：

Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。

Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。

历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。

&lt;h3 id=&quot;常见问题及解决方法&quot;&gt;常见问题及解决方法&lt;/h3&gt;

&lt;strong&gt;错误代码：&lt;/strong&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getLastSuccessful failed. token: 25dc1437-bde5-414b-8f4c-63e9b7026ea4, userName: git@github.com, client: http://localhost:63342/RPC2
java.lang.RuntimeException: Invocation failed Operation timed out
	at org.jetbrains.git4idea.ssh.GitSSHXmlRpcClient.getLastSuccessful(GitSSHXmlRpcClient.java:230)
	at org.jetbrains.git4idea.ssh.SSHMain.authenticate(SSHMain.java:212)
	at org.jetbrains.git4idea.ssh.SSHMain.start(SSHMain.java:173)
	at org.jetbrains.git4idea.ssh.SSHMain.main(SSHMain.java:138)
Caused by: java.net.ConnectException: Operation timed out
	at java.net.PlainSocketImpl.socketConnect(Native Method)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;strong&gt;解决方法：&lt;/strong&gt;

&lt;ol&gt;
  &lt;li&gt;Click File-&amp;gt; Settings. Keyboard shortcut is Ctrl+Alt+S.&lt;/li&gt;
  &lt;li&gt;Search for “Version Control”&lt;/li&gt;
  &lt;li&gt;Choose “Git” under “version Control”&lt;/li&gt;
  &lt;li&gt;In the SSH executable dropdown, choose Native&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 03 May 2017 16:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/05/03/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/03/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%97%AE%E9%A2%98/</guid>
        
        <category>Git</category>
        
        
        <category>Git</category>
        
      </item>
    
      <item>
        <title>Markdown入门指南</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#导语&quot; id=&quot;markdown-toc-导语&quot;&gt;导语&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#markdown-官方文档&quot; id=&quot;markdown-toc-markdown-官方文档&quot;&gt;Markdown 官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#使用-markdown-的优点&quot; id=&quot;markdown-toc-使用-markdown-的优点&quot;&gt;使用 Markdown 的优点&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#markdown-语法的简要规则&quot; id=&quot;markdown-toc-markdown-语法的简要规则&quot;&gt;Markdown 语法的简要规则&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#标题&quot; id=&quot;markdown-toc-标题&quot;&gt;标题&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#列表&quot; id=&quot;markdown-toc-列表&quot;&gt;列表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#引用&quot; id=&quot;markdown-toc-引用&quot;&gt;引用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#图片和链接&quot; id=&quot;markdown-toc-图片和链接&quot;&gt;图片和链接&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#粗体与斜体&quot; id=&quot;markdown-toc-粗体与斜体&quot;&gt;粗体与斜体&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#表格&quot; id=&quot;markdown-toc-表格&quot;&gt;表格&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#代码框&quot; id=&quot;markdown-toc-代码框&quot;&gt;代码框&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#分割线&quot; id=&quot;markdown-toc-分割线&quot;&gt;分割线&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关工具&quot; id=&quot;markdown-toc-相关工具&quot;&gt;相关工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。

&lt;h3 id=&quot;导语&quot;&gt;导语&lt;/h3&gt;

&lt;blockquote&gt;
  Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。
&lt;/blockquote&gt;

&lt;h3 id=&quot;markdown-官方文档&quot;&gt;Markdown 官方文档&lt;/h3&gt;

&lt;blockquote&gt;
  这里可以看到官方的Markdown语法规则文档，当然，后文我也会用自己的方式阐述这些语法的具体用法。
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;创始人 John Gruber 的 Markdown 语法说明&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/#list&quot;&gt;Markdown 中文版语法说明&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;使用-markdown-的优点&quot;&gt;使用 Markdown 的优点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;专注你的文字内容而不是排版样式，安心写作。&lt;/li&gt;
  &lt;li&gt;轻松的导出 HTML、PDF 和本身的 .md 文件。&lt;/li&gt;
  &lt;li&gt;纯文本内容，兼容所有的文本编辑器与字处理软件。&lt;/li&gt;
  &lt;li&gt;随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。可读、直观、学习成本低。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;markdown-语法的简要规则&quot;&gt;Markdown 语法的简要规则&lt;/h3&gt;

&lt;h4 id=&quot;标题&quot;&gt;标题&lt;/h4&gt;

&lt;img src=&quot;http://ooxw95lkz.bkt.clouddn.com/md_title.jpg&quot; alt=&quot;&quot; /&gt;

&lt;h4 id=&quot;列表&quot;&gt;列表&lt;/h4&gt;

&lt;img src=&quot;http://ooxw95lkz.bkt.clouddn.com/md_list.jpg&quot; alt=&quot;&quot; /&gt;

&lt;h4 id=&quot;引用&quot;&gt;引用&lt;/h4&gt;

&lt;img src=&quot;http://ooxw95lkz.bkt.clouddn.com/md_quote.jpg&quot; alt=&quot;&quot; /&gt;

&lt;h4 id=&quot;图片和链接&quot;&gt;图片和链接&lt;/h4&gt;

&lt;img src=&quot;http://ooxw95lkz.bkt.clouddn.com/md_img.jpg&quot; alt=&quot;&quot; /&gt;

&lt;h4 id=&quot;粗体与斜体&quot;&gt;粗体与斜体&lt;/h4&gt;

Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。

例如：&lt;strong&gt;这里是粗体&lt;/strong&gt; &lt;em&gt;这里是斜体&lt;/em&gt;

&lt;h4 id=&quot;表格&quot;&gt;表格&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

这种语法生成的表格如下：

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tables&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Are&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Cool&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;col 3 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;right-aligned&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;col 2 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;centered&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zebra stripes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;are neat&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;代码框&quot;&gt;代码框&lt;/h4&gt;

如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。使用 tab 键即可缩进。

&lt;h4 id=&quot;分割线&quot;&gt;分割线&lt;/h4&gt;

分割线的语法只需要三个 * 号，例如：

&lt;hr /&gt;

&lt;h3 id=&quot;相关工具&quot;&gt;相关工具&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    图床工具

    &lt;a href=&quot;https://portal.qiniu.com&quot;&gt;七牛云&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 24 Apr 2017 05:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/04/24/Markdown%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/24/Markdown%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid>
        
        <category>Markdown</category>
        
        
        <category>Markdown</category>
        
      </item>
    
      <item>
        <title>Java正则表达式</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#基础知识&quot; id=&quot;markdown-toc-基础知识&quot;&gt;基础知识&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#常用正则表达式&quot; id=&quot;markdown-toc-常用正则表达式&quot;&gt;常用正则表达式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#实例&quot; id=&quot;markdown-toc-实例&quot;&gt;实例&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#提取字符串中的数字并高亮显示&quot; id=&quot;markdown-toc-提取字符串中的数字并高亮显示&quot;&gt;提取字符串中的数字并高亮显示&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

正则表达式定义了字符串的模式。正则表达式可以用来搜索、编辑或处理文本。正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。

&lt;h3 id=&quot;基础知识&quot;&gt;基础知识&lt;/h3&gt;

&lt;a href=&quot;http://www.runoob.com/java/java-regular-expressions.html&quot;&gt;菜鸟教程&lt;/a&gt;

&lt;h3 id=&quot;常用正则表达式&quot;&gt;常用正则表达式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;匹配数字  &lt;code class=&quot;highlighter-rouge&quot;&gt;\d+(\.\d+)?&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;匹配中文字符  &lt;code class=&quot;highlighter-rouge&quot;&gt;[\u4e00-\u9fa5]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;匹配邮箱地址  &lt;code class=&quot;highlighter-rouge&quot;&gt;[\w!#$%&amp;amp;'*+/=?^_`{|}~-]+(?:\.[\w!#$%&amp;amp;'*+/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;匹配网址  &lt;code class=&quot;highlighter-rouge&quot;&gt;[a-zA-z]+://[^\s]*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;匹配国内电话号码  &lt;code class=&quot;highlighter-rouge&quot;&gt;\d{3}-\d{8}|\d{4}-\{7,8}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;匹配QQ号  &lt;code class=&quot;highlighter-rouge&quot;&gt;[1-9][0-9]{4,}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;匹配身份证号  &lt;code class=&quot;highlighter-rouge&quot;&gt;^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;匹配手机号码  &lt;code class=&quot;highlighter-rouge&quot;&gt;[1][3587]\d{9}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;实例&quot;&gt;实例&lt;/h3&gt;

&lt;h4 id=&quot;提取字符串中的数字并高亮显示&quot;&gt;提取字符串中的数字并高亮显示&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; String ss = &quot;（一）现状：昆明市所辖14个县市区范围内，共有国有林场14个，其中市级2个，县区12个。从经营类型上划分，全市国有林场均属生态公益型，经营总面积87.32万亩，森林面积63.78万亩，森林总蓄积量为199.55万立方米，森林覆盖率73.05%；（二）目标：通过全面深化国有林场改革，切实做到“三增长、两建立、一确保”。即：资源增长、职工增收、林场增效；全面建立健全职工社会保障体系，尽快建立符合现代林业发展要求的国有林场管理体制和经营机制；确保林区社会和谐稳定&quot;;   
        // 创建 Pattern 对象
        Pattern pattern = Pattern.compile(&quot;\d+(\.\d+)?&quot;);
        Matcher matcher = pattern.matcher(ss.trim());
        String lasts=&quot;&quot;;
        while (matcher.find()){
            if(lasts.equals(matcher.group())){
                ss=ss.replace(matcher.group(),&quot;&amp;lt;font color=#FF4081&amp;gt;&amp;lt;b&amp;gt;&quot;+ matcher.group()+ &quot;&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&quot;);

            }else {
                ss=ss.replaceFirst(matcher.group(),&quot;&amp;lt;font color=#FF4081&amp;gt;&amp;lt;b&amp;gt;&quot;+ matcher.group()+ &quot;&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&quot;);
            }
            lasts=matcher.group();
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 19 Apr 2017 16:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/04/19/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/19/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
        
        <category>Java</category>
        
        <category>Android</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>如何在Android面试中脱颖而出</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#怎么写简历&quot; id=&quot;markdown-toc-怎么写简历&quot;&gt;怎么写简历？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#项目经验如何展示&quot; id=&quot;markdown-toc-项目经验如何展示&quot;&gt;项目经验如何展示？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#须知&quot; id=&quot;markdown-toc-须知&quot;&gt;须知&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#注意事项&quot; id=&quot;markdown-toc-注意事项&quot;&gt;注意事项&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#常问的知识点&quot; id=&quot;markdown-toc-常问的知识点&quot;&gt;常问的知识点&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#初级&quot; id=&quot;markdown-toc-初级&quot;&gt;初级&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#中级&quot; id=&quot;markdown-toc-中级&quot;&gt;中级&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#高级&quot; id=&quot;markdown-toc-高级&quot;&gt;高级&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#插件化&quot; id=&quot;markdown-toc-插件化&quot;&gt;插件化&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#常见的要求&quot; id=&quot;markdown-toc-常见的要求&quot;&gt;常见的要求&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

马上要去面安卓开发岗位了……简历该如何写才不易石沉大海？项目经历该如何展示？有那些必考的面试题？

&lt;h3 id=&quot;怎么写简历&quot;&gt;怎么写简历？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;简历不要太花哨, 你是应聘的技术, 不是设计师&lt;/li&gt;
  &lt;li&gt;简历把一些基本信息要说清楚（无关的不要写, 比如头像之类的）&lt;/li&gt;
  &lt;li&gt;有个人博客跟 GitHub 的写上, 若没有内容那就算了&lt;/li&gt;
  &lt;li&gt;应届毕业生需写上相关证书之类, 有经验的可不写&lt;/li&gt;
  &lt;li&gt;简历控制在两页 A4 纸&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;项目经验如何展示&quot;&gt;项目经验如何展示？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一般写 2, 3个代表性的项目就好，优先写本职工作相关的&lt;/li&gt;
  &lt;li&gt;时间为倒序&lt;/li&gt;
  &lt;li&gt;说明你在项目当中的职责作用&lt;/li&gt;
  &lt;li&gt;项目模块需要了解大概逻辑与思路，以及一些关键的技术点，以防面试官问到&lt;/li&gt;
  &lt;li&gt;没有项目经验的也要模仿一两个小 Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;须知&quot;&gt;须知&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;自己亲自做的东西一定要明白, 如果不是自己亲自做的, 请慎重骗面试官&lt;/li&gt;
  &lt;li&gt;问的时候会问一些知识点相关的话题，比如你的数据是需要 api 交互的，那可能会问 http 相关， json 数据解析相关，缓存相关，图片加载相关等&lt;/li&gt;
  &lt;li&gt;对用到的知识点虽用不着一定要看源码的地步，但是最好要懂原理，比如图片加载一定要知道二级缓存，一些常见的缓存算法&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;注意事项&quot;&gt;注意事项&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;去面试前一定要花点时间了解下你面试的这家公司（本身有自己产品的下载体验一下，以防面试过程中问到，或者可以给产品提点意见)&lt;/li&gt;
  &lt;li&gt;面试的时候态度要谦虚点&lt;/li&gt;
  &lt;li&gt;个人兴趣(不要提什么打游戏, 唱歌之类的,可以说一下业余时间提下自己经常上一些技术社区,看一些技术博客之类的)&lt;/li&gt;
  &lt;li&gt;除了基本的知识点, 面试官通常都会问一些比较深的领域(可能你没有接触过,但不要气馁, 面试官在考察下你的技术的深度, 这些领域一般包括设计模式, 虚拟机, 插件化, React Native之类的)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;常问的知识点&quot;&gt;常问的知识点&lt;/h3&gt;
针对不同的级别问的知识点是不一样的。

&lt;h4 id=&quot;初级&quot;&gt;初级&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;那基本的 Activity/Fragment的生命周期&lt;/li&gt;
  &lt;li&gt;四大组件的具体作用以及用法&lt;/li&gt;
  &lt;li&gt;Activity四种启动模式的区别&lt;/li&gt;
  &lt;li&gt;ListView的优化&lt;/li&gt;
  &lt;li&gt;一些动画的使用&lt;/li&gt;
  &lt;li&gt;Java一些基础知识(如最基本的 String, StringBuilder, StringBuffer的区别; 如ArrayList, LinkedList的区别; Java线程的几种用法)&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;中级&quot;&gt;中级&lt;/h4&gt;

屏幕适配经验，性能优化的经验、Java 线程几种用法等

&lt;h4 id=&quot;高级&quot;&gt;高级&lt;/h4&gt;

如插件化, 如网络的优化, 如缓存的处理, 如插件化, 如Service保活
对产品的一些看法, 对代码质量的要求, 对开发流程、团队合作的理解等

&lt;h6 id=&quot;插件化&quot;&gt;插件化&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;a href=&quot;https://github.com/DroidPluginTeam/DroidPlugin&quot;&gt;Droid Plugin&lt;/a&gt;

    DroidPlugin 是&lt;strong&gt;&lt;em&gt;360手机助手&lt;/em&gt;&lt;/strong&gt;在Android系统上实现了一种新的&lt;strong&gt;&lt;em&gt;插件机制&lt;/em&gt;&lt;/strong&gt;:它可以在无需安装、修改的情况下运行APK文件,此机制对改进大型APP的架构，实现多团队协作开发具有一定的好处。
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;常见的要求&quot;&gt;常见的要求&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;计算机相关专业本科及以上学历，3年以上Android开发经验，有完整应用项目开发经验；&lt;/li&gt;
  &lt;li&gt;熟练掌握Android平台开发，精通自定义UI组件，图形绘制，动画特效等；&lt;/li&gt;
  &lt;li&gt;熟悉Android系统框架(Framework相关)以及NDK开发技术；&lt;/li&gt;
  &lt;li&gt;熟练掌握Android网络编程、多线程编程以及进程间通信技术；&lt;/li&gt;
  &lt;li&gt;熟练使用Linux操作系统、Android源码及应用编译过程以及Android开发调试工具，熟悉Git代码管理工具；&lt;/li&gt;
  &lt;li&gt;熟悉常用开源项目，有良好的编码风格和编程习惯；&lt;/li&gt;
  &lt;li&gt;在app Store发布过作品的优先考虑。&lt;/li&gt;
  &lt;li&gt;熟悉HTML5、JS相关框架与知识。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 19 Apr 2017 06:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/04/19/%E5%A6%82%E4%BD%95%E5%9C%A8Android%E9%9D%A2%E8%AF%95%E4%B8%AD%E8%84%B1%E9%A2%96%E8%80%8C%E5%87%BA/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/19/%E5%A6%82%E4%BD%95%E5%9C%A8Android%E9%9D%A2%E8%AF%95%E4%B8%AD%E8%84%B1%E9%A2%96%E8%80%8C%E5%87%BA/</guid>
        
        <category>Android</category>
        
        <category>面试</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android 开发规范</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#参考资料&quot; id=&quot;markdown-toc-参考资料&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#一命名规约&quot; id=&quot;markdown-toc-一命名规约&quot;&gt;（一）命名规约&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

Android 命名规范根据平时开发经验总结，并参考阿里巴巴Java开发手册。

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;a href=&quot;http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8Cv1.1.1.pdf&quot;&gt;阿里巴巴Java开发手册&lt;/a&gt;

&lt;h3 id=&quot;一命名规约&quot;&gt;（一）命名规约&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;包名&lt;/li&gt;
&lt;/ul&gt;

【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用 单数形式，但是类名如果有复数含义，类名可以使用复数形式。

正例: 应用工具类包名为com.alibaba.open.util、类名为MessageUtils(此规则参考 spring 的框架结构)

&lt;ul&gt;
  &lt;li&gt;类名&lt;/li&gt;
&lt;/ul&gt;

【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外:(领域模型 的相关命名)DO / BO / DTO / VO等。

正例:MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion

反例:macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion

&lt;ul&gt;
  &lt;li&gt;方法名&lt;/li&gt;
&lt;/ul&gt;

【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从 驼峰形式。

正例: localValue / getHttpMessage() / inputUserId

&lt;ul&gt;
  &lt;li&gt;常量&lt;/li&gt;
&lt;/ul&gt;

【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。

正例: MAX_STOCK_COUNT

反例: MAX_COUNT

&lt;ul&gt;
  &lt;li&gt;控件名&lt;/li&gt;
&lt;/ul&gt;

【强制】控件名统一使用 控件名简写_功能释义。

正例: btn_login tv_title rcl_alarminfo

</description>
        <pubDate>Wed, 12 Apr 2017 06:14:54 +0800</pubDate>
        <link>http://localhost:4000/2017/04/12/Android%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/12/Android%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</guid>
        
        <category>Android</category>
        
        
        <category>Android</category>
        
      </item>
    
  </channel>
</rss>
